// Generated by CoffeeScript 1.6.3
/*
# test for basic
*/


(function() {
  var MODEL_NAME, REDIS_CLIENT, Record, TAGS_COFFEESCRIPT, TAGS_JQUERY, TAGS_NODE, TAGS_NODE2, TAGS_RAILS, async, mongoose, redis, schema, should, taggable;

  should = require("should");

  mongoose = require('mongoose');

  taggable = require("../mongoose-taggable-via-redis");

  redis = require("redis");

  async = require("async");

  REDIS_CLIENT = redis.createClient();

  MODEL_NAME = "Record";

  TAGS_NODE = "javascript,server,programming".split(",").sort();

  TAGS_JQUERY = "javascript,client,programming".split(",").sort();

  TAGS_RAILS = "ruby,programming".split(",").sort();

  TAGS_COFFEESCRIPT = "javascript,client,server,programming".split(",").sort();

  TAGS_NODE2 = "javascript,server,programming,async,joyent".split(",").sort();

  schema = void 0;

  Record = null;

  describe("test basic", function() {
    before(function(done) {
      console.log("[basic_test::before 1]");
      mongoose.connect("mongodb://localhost/test");
      return mongoose.connection.once("connected", function(err) {
        if (err != null) {
          return done(err);
        }
        schema = new mongoose.Schema({}, {
          versionKey: false
        });
        schema.add({
          _id: String,
          name: String,
          createdAt: Date
        });
        console.dir(taggable);
        schema.plugin(taggable, {
          taggable: "book",
          redisClient: REDIS_CLIENT
        });
        mongoose.model(MODEL_NAME, schema);
        return done();
      });
    });
    before(function(done) {
      console.log("[basic_test::before 2]");
      Record = mongoose.model(MODEL_NAME);
      Record.remove(done);
    });
    before(function(done) {
      var arr, i, _i;
      console.log("[basic_test::before 3]");
      arr = [];
      for (i = _i = 0; _i < 100; i = ++_i) {
        arr.push(i);
      }
      async.each(arr, (function(i, cb) {
        var obj;
        obj = {
          _id: "" + ((Date.now()).toString(36)) + i,
          name: "paginate_" + i,
          createdAt: new Date().setDate(new Date().getDate() - i)
        };
        Record(obj).save(cb);
      }), done);
    });
    return describe("mongoose-taggable-via-redis", function() {
      it("should able to set tags", function(done) {
        Record.findOne(function(err, item) {
          should.not.exist(err);
          item.setTags(TAGS_NODE, function(err) {
            should.not.exist(err);
            Record.findWithTags({
              _id: item.id
            }, function(err, results) {
              var tags;
              console.dir(results);
              should.not.exist(err);
              results.length.should.eql(1);
              tags = results[0].tags;
              console.log("[basic_test] tags:" + tags);
              tags.sort().should.containDeep(TAGS_NODE);
              return done();
            });
          });
        });
      });
    });
  });

}).call(this);
