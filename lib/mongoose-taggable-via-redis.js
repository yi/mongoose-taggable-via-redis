// Generated by CoffeeScript 1.6.3
(function() {
  var Taggable, assert, debuglog, exports, findCallbackFromArguments, getIdFromResult, mongoose;

  Taggable = require("taggable-via-redis");

  assert = require("assert");

  debuglog = require("debug")("mongoose-taggable");

  mongoose = require('mongoose');

  getIdFromResult = function(result) {
    return result._id || result.id;
  };

  findCallbackFromArguments = function(args) {
    var i, theCallback, _i, _ref;
    theCallback = null;
    for (i = _i = 0, _ref = args.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      if ("function" === typeof args[i]) {
        return i;
      }
    }
    return -1;
  };

  module.exports = exports = function(schema, options) {
    var taggable;
    debuglog("[init] schema:" + schema);
    taggable = new Taggable(options);
    schema.virtual('tags').set(function(val) {
      return this._tags = val;
    }).get(function() {
      return this._tags;
    });
    schema.methods.setTags = function(tags, callback) {
      var scope;
      debuglog("[setTags] id:" + this.id + ", tags:" + tags);
      scope = typeof options.getScope === "function" ? options.getScope(this) : void 0;
      taggable.set(this.id, tags, scope, callback);
    };
    schema.statics['popularTags'] = taggable.popular;
    schema.statics['findByTags'] = function(tags, scope, callback) {
      if ('function' === typeof scope) {
        callback = scope;
        scope = null;
      }
      return taggable.find(tags, scope, function(err, ids) {
        if (err != null) {
          return callback(err);
        }
        this.find({
          _id: {
            $in: ids
          }
        }, callback);
      });
    };
    schema.statics['findWithTags'] = function(conditions, callback) {
      debuglog("[findWithTags]");
      if ("function" === typeof conditions) {
        callback = conditions;
        conditions = {};
      }
      this.find(conditions, function(err, results) {
        var ids, scope;
        if (err != null) {
          return typeof callback === "function" ? callback(err) : void 0;
        }
        if (!(Array.isArray(results) && results.length > 0)) {
          return typeof callback === "function" ? callback(null, results) : void 0;
        }
        ids = results.map(getIdFromResult);
        scope = typeof options.getScope === "function" ? options.getScope(results[0]) : void 0;
        debuglog("[findWithTags] ids:" + ids + ", scope:" + scope + ", taggable:" + taggable);
        return taggable.get(ids, scope, function(err, tagsArray) {
          var i, object, _i, _len;
          debuglog("[findWithTags] err:" + err + ", tagsArray !!!!!:" + tagsArray);
          if (err != null) {
            return typeof callback === "function" ? callback(err) : void 0;
          }
          for (i = _i = 0, _len = results.length; _i < _len; i = ++_i) {
            object = results[i];
            debuglog("[method] before");
            console.dir(object);
            object.tags = tagsArray[i];
            debuglog("[method] after");
            console.dir(object);
            debuglog("[method] after, tags:" + object.tags);
          }
          if (typeof callback === "function") {
            callback(null, results);
          }
        });
      });
    };
    mongoose.Query.prototype.execWithTag = function(callback) {
      var _this = this;
      this.exec(function(err, results) {
        var ids, scope;
        if (err != null) {
          return typeof callback === "function" ? callback(err) : void 0;
        }
        if (!(Array.isArray(results) && results.length > 0)) {
          return typeof callback === "function" ? callback(null, results) : void 0;
        }
        ids = results.map(getIdFromResult);
        scope = typeof options.getScope === "function" ? options.getScope(results[0]) : void 0;
        taggable.get(ids, scope, function(err, tags) {
          var i, object, _i, _len;
          if (err != null) {
            return typeof callback === "function" ? callback(err) : void 0;
          }
          for (i = _i = 0, _len = results.length; _i < _len; i = ++_i) {
            object = results[i];
            object.tags = tags[i];
          }
          callback(null, results);
        });
      });
    };
  };

}).call(this);
